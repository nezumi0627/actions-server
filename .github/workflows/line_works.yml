name: line works bot test

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # 毎5分ごとに実行

env:
  WORKS_ID: ${{ secrets.WORKS_ID }}
  WORKS_PASSWORD: ${{ secrets.WORKS_PASSWORD }}

jobs:
  run-bot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.11'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install matplotlib pandas

      - name: Create log directory
        run: mkdir -p log

      - name: Create initial log file
        run: touch log/log.md

      - name: Run bot
        run: |
          python src/works_bot.py
          sleep 300
          python src/works_bot.py &

      - name: Analyze logs
        run: |
          python -c """
          import os
          import json
          import matplotlib.pyplot as plt
          import pandas as pd
          from datetime import datetime

          # Read log file
          with open('log/log.md', 'r', encoding='utf-8') as f:
              lines = f.readlines()

          # Initialize counters
          start_time = None
          message_count = 0
          command_counts = {}

          # Parse log entries
          for line in lines:
              if line.startswith('- ['):
                  message_count += 1
                  parts = line.split(', ')
                  timestamp = parts[0][4:24]
                  channel = parts[1].split(': ')[1]
                  command = parts[2].split(': ')[1]

                  if not start_time:
                      start_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                  
                  if command not in command_counts:
                      command_counts[command] = 0
                  command_counts[command] += 1

          # Calculate runtime
          end_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
          runtime = end_time - start_time

          # Create statistics
          stats = [
              f"# Bot Statistics\n",
              f"- Runtime: {runtime}\n",
              f"- Total Messages: {message_count}\n",
              f"- Total Commands: {sum(command_counts.values())}\n",
              "\n## Command Usage Statistics\n",
          ]

          # Sort commands by usage
          sorted_commands = sorted(command_counts.items(), key=lambda x: x[1], reverse=True)

          # Add command usage stats
          for cmd, count in sorted_commands:
              stats.append(f"- {cmd}: {count} times\n")

          # Create bar chart for command usage
          plt.figure(figsize=(10, 6))
          commands = [cmd for cmd, _ in sorted_commands]
          counts = [count for _, count in sorted_commands]
          plt.bar(commands, counts)
          plt.title('Command Usage Statistics')
          plt.xlabel('Commands')
          plt.ylabel('Usage Count')
          plt.xticks(rotation=45)
          plt.tight_layout()
          plt.savefig('log/command_usage.png')

          # Update log.md with statistics
          with open('./log/log.md', 'w', encoding='utf-8') as f:
              f.writelines(stats)

          # Push log.md to GitHub
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git add log/log.md
          git commit -m "Update log.md"
          git push origin main
          """
